// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum ExperienceRange {
  ZERO_TO_ONE
  ONE_TO_THREE
  THREE_TO_SIX
  SIX_PLUS
}

enum JobType {
  PART_TIME
  FULL_TIME
  FREELANCE
  INTERNSHIP
}

enum Currency {
  INR
  USD
}

enum ApplicationStatus {
  PENDING
  REVIEWED
  SHORTLISTED
  REJECTED
  HIRED
}

model User {
  id                String            @id @default(cuid())
  name              String?
  email             String            @unique
  emailVerified     DateTime?
  password          String?
  image             String?           // User profile image/avatar
  role              UserRole          @default(USER)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  // Profile information
  bio               String?
  location          String?
  
  // Social links
  githubLink        String?
  portfolioLink     String?
  linkedinLink      String?
  twitterLink       String?
  websiteLink       String?
  
  // Skills & Experience
  skills            String[]          @default([])
  resume            String?           // URL to resume file
  experienceRange   ExperienceRange?
  
  // Relations
  projects          Project[]
  previousCompanies PreviousCompany[]
  
  // Jobs the user has posted (as employer)
  postedJobs        Job[]             @relation("JobPoster")
  
  // Jobs the user has applied to (as job seeker)
  applications      JobApplication[]  @relation("JobApplicant")
  
  // Jobs the user has bookmarked
  bookmarks         Bookmark[]
  
  // Other relations from the product showcase feature
  upvotes           Upvote[]
  products          Product[]
  comments          Comment[]
  accounts          Account[]
}

model Project {
  id           String   @id @unique @default(cuid())
  userId       String
  title        String    
  githubURL    String?
  deployedLink String
  description  String
  skills       String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, title])
  @@index([userId])
}

model PreviousCompany {
  id             String   @id @unique @default(cuid())
  userId         String
  role           String
  jobType        JobType
  companyName    String
  companyWebsite String?
  duration       String
  startDate      DateTime?
  endDate        DateTime?
  isCurrentJob   Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model Job {
  id                 String           @id @unique @default(cuid())
  posterId           String           // User who posted this job
  title              String
  companyName        String
  companyLogo        String?
  companyDescription String?
  companyWebsite     String?
  jobType            JobType
  minExperience      Int
  maxExperience      Int
  description        String           @db.Text
  skillsRequired     String[]
  minSalary          Int?
  maxSalary          Int?
  currency           Currency         @default(INR)
  location           String?
  isRemote           Boolean          @default(false)
  isVerified         Boolean          @default(false)
  postedAt           DateTime         @default(now())
  applicationLink    String?          // External application link if any
  applicationEmail   String?          // Email for applications if any
  expiresAt          DateTime?
  updatedAt          DateTime         @updatedAt
  
  // Relations
  poster             User             @relation("JobPoster", fields: [posterId], references: [id], onDelete: Cascade)
  applications       JobApplication[] @relation("JobApplications")
  bookmarks          Bookmark[]
  
  @@index([posterId])
}

model JobApplication {
  id          String            @id @default(cuid())
  jobId       String
  applicantId String            // User who applied to the job
  status      ApplicationStatus @default(PENDING)
  coverLetter String?           @db.Text
  resumeUrl   String?           // URL to the resume for this specific application
  appliedAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  notes       String?           @db.Text  // Notes from the job poster
  
  job         Job               @relation("JobApplications", fields: [jobId], references: [id], onDelete: Cascade)
  applicant   User              @relation("JobApplicant", fields: [applicantId], references: [id], onDelete: Cascade)
  
  @@unique([applicantId, jobId])
  @@index([applicantId])
  @@index([jobId])
}

model Bookmark {
  id          String   @id @default(cuid())
  jobId       String
  userId      String
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  job         Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  
  @@unique([userId, jobId])
  @@index([userId])
  @@index([jobId])
}

model Product {
  id          String     @id @default(cuid())
  name        String
  slug        String     @unique
  headline    String
  rank        Int
  description String
  logo        String
  website     String
  github      String
  twitter     String
  comments    Comment[]
  upvotes     Upvote[]
  images      Image[]
  categories  Category[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[]
}

model Image {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Upvote {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
}

model Comment {
  id             String    @id @default(cuid())
  profilePicture String
  productId      String
  product        Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId         String
  user           User      @relation(fields: [userId], references: [id])
  body           String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}
model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}
//npx prisma generate
//npx prisma db push
